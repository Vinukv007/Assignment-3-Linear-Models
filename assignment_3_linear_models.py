# -*- coding: utf-8 -*-
"""Assignment-3: Linear Models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZRmShh8_NLu8j7U6GDWMszZ9yu__RaMA

### 1.House Rental Prediction

---
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

df=pd.read_csv('https://raw.githubusercontent.com/edyoda/data-science-complete-tutorial/master/Data/house_rental_data.csv.txt')
df.head()

len(df)

df.drop('Unnamed: 0',1,inplace=True)

df.drop_duplicates(inplace=True)
len(df)

df.corr()

df.isna().sum()

sns.pointplot(df['Living.Room'],df.Price)

sns.pointplot(df['Floor'],df.Price)

sns.pointplot(df['TotalFloor'],df.Price)

sns.pointplot(df['Bathroom'],df.Price)

sns.pointplot(df['Bedroom'],df.Price)

sns.scatterplot(df.Sqft,df.Price)

# From plots, we can see the price is not dependent on floor and total floor

x=df.drop(['Floor',	'TotalFloor','Price'],1)
y=df.Price

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3,random_state=0)

price_lr=LinearRegression()
price_lr.fit(xtrain,ytrain)
price_lr.score(xtest,ytest)

"""### 2.Employee Exit Prediction.

---


"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

df.dtypes

df=pd.read_csv('https://raw.githubusercontent.com/edyoda/data-science-complete-tutorial/master/Data/HR_comma_sep.csv.txt')
df.head()

group=df.groupby('left').mean().reset_index()
group

sns.pointplot(group.left,group.satisfaction_level)

df.columns

sns.pointplot(group.left,group.promotion_last_5years)

sns.pointplot(df.salary, df.left)

sns.pointplot(df.left, df.sales)

salary={'low': 1, 'medium': 2, 'high': 3}

df.salary=df.salary.map(salary)
df.salary.unique()

# sales, last evaluation and work accident doesnt correlate with the rate of leaving the office

x=df[['satisfaction_level', 'number_project',
       'average_montly_hours', 'time_spend_company', 'left',
       'promotion_last_5years']]
y=df.left

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3,random_state=0)

logreg=LogisticRegression()
logreg.fit(xtrain,ytrain)

logreg.score(xtest,ytest)

"""### 3. Mobile Price Prediction

---





"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import re

df=pd.read_csv('mobile_price_data.csv')
df.head()

df.drop_duplicates(inplace=True)

df.info()

df.columns

df.drop(['mobile_color', 'dual_sim', 'bluetooth', 'mob_width',
       'mob_height', 'mob_depth', 'mob_weight'],1,inplace=True)
df.info()

df.columns

df['brand']=df.mobile_name.str.extract(r"(\w+)")

df.brand[df.brand=='MI3']='Mi'
df.brand.unique()

df['price(Rs.)']=df.mobile_price.str.extract(r"(\d+)")+df.mobile_price.str.extract(r",(\d+)")

df['display(cm)']=df.disp_size.str.extract(r"([0-9\.]+)")

df['res']=df.resolution.str.extract(r"(720|1080|540)")

df['cores']=df.num_cores.map({'Octa Core':8, 'Quad Core':4, 'Single Core':1})

df['clock_speed(GHz)']=df.mp_speed.str.extract(r"([0-9\.])")

df['storage']=df.int_memory.str.extract(r"(\d+)")

df['ram']=df.ram.str.extract(r"(\d+)")

df['primary_cam(MP)']=df.p_cam.str.extract(r"(\d+)")

df['back_camera_count']=df.p_cam.str.count(r"(\d+)")

df['front_cam(MP)']=df.f_cam.str.extract(r"(\d+)")

df['bands']=df.network.str.extract(r"(4G)")
df.bands[df.network=='3G']='3G'
df.bands[df.network=='2G']='2G'

df['battery(Mah)']=df.battery_power.str.extract(r"(\d+)")

df.drop([ 'mobile_price', 'disp_size', 'resolution', 'os',
       'num_cores', 'mp_speed', 'int_memory', 'ram', 'p_cam', 'f_cam',
       'network', 'battery_power'],1,inplace=True)
df.info()

df.head()

df.columns

for i in [ 'price(Rs.)', 'res', 'cores'
       , 'storage', 'primary_cam(MP)', 'back_camera_count',
       'front_cam(MP)', 'battery(Mah)']:
       df[i]=df[i].astype(int)

df['display(cm)']=df['display(cm)'].astype(float)
df['clock_speed(GHz)']=df['clock_speed(GHz)'].astype(float)

df.info()

df.bands=df.bands.map({'4G':3, '3G':2, '2G':1})

from sklearn.preprocessing import MinMaxScaler

mms=MinMaxScaler()

df['res_scaled']=mms.fit_transform(df[['res']])

x=df[['display(cm)', 'cores',
       'clock_speed(GHz)', 'storage', 'primary_cam(MP)', 'back_camera_count',
       'front_cam(MP)', 'bands', 'battery(Mah)', 'res_scaled']]
y=df['price(Rs.)']

new_x=pd.concat([x,pd.get_dummies(df.brand,prefix='brand')],1)
new_x.drop('brand_Mi',1,inplace=True)
xtrain,xtest,ytrain, ytest=train_test_split(new_x,y,test_size=0.2, random_state=2)

from sklearn.linear_model import LinearRegression
lreg=LinearRegression()

lreg.fit(xtrain,ytrain)
lreg.score(xtest,ytest)

from sklearn.tree import DecisionTreeRegressor
dtr=DecisionTreeRegressor()

dtr.fit(xtrain,ytrain)
dtr.score(xtest,ytest)

"""### 4. Predict the price of an Airbnb listing

---


"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import re

df=pd.read_csv('airbnb_listing_train.csv')
df.head()

df.columns

df.isna().sum()

df.drop(['id', 'name', 'host_id','neighbourhood_group','number_of_reviews', 'last_review', 'reviews_per_month'],1,inplace=True)

df.dropna(inplace=True)

df.isna().sum()

df.dtypes

from sklearn.preprocessing import OrdinalEncoder

host=list(df.groupby('host_name').mean().sort_values(by='price').reset_index()['host_name'])
host_dict=dict(zip(host,[i for i in range(len(host)+1)]))
df['host_name']=df['host_name'].map(host_dict)

neighbour=list(df.groupby('neighbourhood').mean().sort_values(by='price').reset_index()['neighbourhood'])
neighbour_dict=dict(zip(neighbour,[i for i in range(len(neighbour)+1)]))
df['neighbourhood']=df['neighbourhood'].map(neighbour_dict)

room=list(df.groupby('room_type').mean().sort_values(by='price').reset_index()['room_type'])
room_dict=dict(zip(room,[i for i in range(len(room)+1)]))
df['room_type']=df['room_type'].map(room_dict)

df.dtypes

from sklearn.preprocessing import MinMaxScaler
mm=MinMaxScaler()
df[['host_name', 'neighbourhood', 'room_type',
       'minimum_nights', 'calculated_host_listings_count', 'availability_365']]=mm.fit_transform(df[['host_name', 'neighbourhood', 'room_type',
       'minimum_nights', 'calculated_host_listings_count', 'availability_365']])

x=df.drop('price',1)
y=df.price

df.corr()['price']

from sklearn.linear_model import LinearRegression,LogisticRegression,Lasso,Ridge
lr=LinearRegression()
lg=LogisticRegression()
lasso=Lasso()
ridge=Ridge()

lr.fit(x,y)
lr.score(x,y)

lg.fit(x,y)
lg.score(x,y)

lasso.fit(x,y)
lasso.score(x,y)

ridge.fit(x,y)
ridge.score(x,y)

dftest=pd.read_csv('airbnb_listing_validate.csv')
dftest.head()

dftest.columns

dftest.drop_duplicates(inplace=True)
dftest.drop(['name', 'host_id','neighbourhood_group','number_of_reviews', 'last_review', 'reviews_per_month'],1,inplace=True)
dftest.dropna(inplace=True)

dftest.isna().sum()

dftest['host_name']=dftest['host_name'].map(host_dict)
dftest['neighbourhood']=dftest['neighbourhood'].map(neighbour_dict)
dftest['room_type']=dftest['room_type'].map(room_dict)

dftest.head()

from sklearn.preprocessing import MinMaxScaler
mm=MinMaxScaler()
dftest[['host_name', 'neighbourhood', 'room_type',
       'minimum_nights', 'calculated_host_listings_count', 'availability_365']]=mm.fit_transform(dftest[['host_name', 'neighbourhood', 'room_type',
       'minimum_nights', 'calculated_host_listings_count', 'availability_365']])

dftest['host_name'].fillna(dftest['host_name'].mode()[0],inplace=True)

dftest.isna().sum()

dftest['price']=lr.predict(dftest.drop('id',1))

output=dftest[['id','price']]
output.to_csv('output.csv')

